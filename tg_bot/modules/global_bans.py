import html
from io import BytesIO
from typing import Optional, List

from telegram import Message, Update, Bot, User, Chat, ParseMode
from telegram.error import BadRequest, TelegramError
from telegram.ext import run_async, CommandHandler, MessageHandler, Filters
from telegram.utils.helpers import mention_html

import tg_bot.modules.sql.global_bans_sql as sql
from tg_bot import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, STRICT_GBAN
from tg_bot.modules.helper_funcs.chat_status import user_admin, is_user_admin
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.filters import CustomFilters
from tg_bot.modules.helper_funcs.misc import send_to_list
from tg_bot.modules.sql.users_sql import get_all_chats

GBAN_ERRORS = {
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞",
    "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫",
    "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
    "–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω",
    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã.",
    "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞",
    "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–∞–∑–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã.",
    "–ß–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
    "–ù–µ –≤ —á–∞—Ç–µ"
}

UNGBAN_ERRORS = {
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞",
    "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫",
    "–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤.",
    "–ù–µ –≤ —á–∞—Ç–µ",
    "–ß–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
    "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞",
    "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
}


@run_async
def gban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("–û—É—É—É—É,–∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ —Ä—É—Ç! *–±–µ—Ä–µ—Ç –ø–æ–ø–∫–æ—Ä–Ω*")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("–û—É—É—É—É,–∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏! *–±–µ—Ä–µ—Ç –ø–æ–ø–∫–æ—Ä–Ω*")
        return

    if user_id == bot.id:
        message.reply_text("-_- –¢–∞–∫ —Å–º–µ—à–Ω–æ, –¥–∞–≤–∞–π –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö, –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        return

    if sql.is_user_gbanned(user_id):
        if not reason:
            message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ø –±—ã –∏–∑–º–µ–Ω–∏–ª –ø—Ä–∏—á–∏–Ω—É, –Ω–æ —Ç—ã –º–Ω–µ –Ω–µ –¥–∞–ª ...")
            return

        old_reason = sql.update_gban_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if old_reason:
            message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ:\n"
                               "<code>{}</code>\n"
                               "–Ø –ø–æ—à–µ–ª –∏ –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ —Å –≤–∞—à–µ–π –Ω–æ–≤–æ–π –ø—Ä–∏—á–∏–Ω–æ–π!".format(html.escape(old_reason)),
                               parse_mode=ParseMode.HTML)
        else:
            message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ –¥–ª—è –Ω–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äã‚Äã–ø—Ä–∏—á–∏–Ω–∞; –Ø –ø–æ—à–µ–ª –∏ –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ!")

        return

    message.reply_text("*–°–¥—É–≤–∞–µ—Ç –ø—ã–ª—å —Å –±–∞–Ω—Ö–∞–º–º–µ—Ä–∞* üòâ")

    banner = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {} "
                 "–ø–æ—Ç–æ–º—É —á—Ç–æ:\n{}".format(mention_html(banner.id, banner.first_name),
                                       mention_html(user_chat.id, user_chat.first_name), reason or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                 html=True)

    sql.gban_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            bot.kick_chat_member(chat_id, user_id)
        except BadRequest as excp:
            if excp.message in GBAN_ERRORS:
                pass
            else:
                message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å gban –∏–∑-–∑–∞: {}".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å gban –∏–∑-–∑–∞: {}".format(excp.message))
                sql.ungban_user(user_id)
                return
        except TelegramError:
            pass


    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "gban –∑–∞–≤–µ—Ä—à–µ–Ω —É–¥–∞—á–Ω–æ!")
    message.reply_text("–ß–µ–ª–æ–≤–µ–∫ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@run_async
def ungban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        return

    if not sql.is_user_gbanned(user_id):
        message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        return

    banner = update.effective_user  # type: Optional[User]

    message.reply_text("–Ø –¥–∞–º {} –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ.".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}".format(mention_html(banner.id, banner.first_name),
                                                   mention_html(user_chat.id, user_chat.first_name)),
                 html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            print(chat_id)
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'kicked':
                bot.unban_chat_member(chat_id, user_id)

        except BadRequest as excp:
            if excp.message in UNGBAN_ERRORS:
                pass
            else:
                message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å gban –∏–∑-–∑–∞:{}".format(excp.message))
                bot.send_message(OWNER_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å gban –∏–∑-–∑–∞: {}".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungban_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "un-gban —É–¥–∞—á–Ω–æ!")

    message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@run_async
def gbanlist(bot: Bot, update: Update):
    banned_users = sql.get_gban_list()

    if not banned_users:
        update.effective_message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å gban-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏! –¢—ã –¥–æ–±—Ä–µ–µ, —á–µ–º —è –æ–∂–∏–¥–∞–ª ...")
        return

    banfile = '–ö —á–µ—Ä—Ç—É —ç—Ç–∏—Ö –ø–∞—Ä–Ω–µ–π.\n'
    for user in banned_users:
        banfile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            banfile += "–ø—Ä–∏—á–∏–Ω–∞: {}\n".format(user["reason"])

    with BytesIO(str.encode(banfile)) as output:
        output.name = "gbanlist.txt"
        update.effective_message.reply_document(document=output, filename="gbanlist.txt",
                                                caption="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")


def check_and_ban(update, user_id, should_message=True):
    if sql.is_user_gbanned(user_id):
        update.effective_chat.kick_member(user_id)
        if should_message:
            update.effective_message.reply_text("–≠—Ç–æ –ø–ª–æ—Ö–æ–π —á–µ–ª–æ–≤–µ–∫, –∏—Ö –∑–¥–µ—Å—å –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!")

@run_async
@user_admin
def gbanstat(bot: Bot, update: Update, args: List[str]):
    if len(args) > 0:
        if args[0].lower() in ["on", "yes"]:
            sql.enable_gbans(update.effective_chat.id)
            update.effective_message.reply_text("–Ø –≤–∫–ª—é—á–∏–ª gbans –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—Å "
                                                "–æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ç—Ä–æ–ª–ª–µ–π.")
        elif args[0].lower() in ["off", "no"]:
            sql.disable_gbans(update.effective_chat.id)
            update.effective_message.reply_text("–Ø –æ—Ç–∫–ª—é—á–∏–ª gbans –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. GBans –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                                                "–±–æ–ª—å—à–µ. –í—ã –±—É–¥–µ—Ç–µ –º–µ–Ω–µ–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Ç—Ä–æ–ª–ª–µ–π –∏ —Å–ø–∞–º–µ—Ä–æ–≤"
                                                "—Ö–æ—Ç—å!")
    else:
        update.effective_message.reply_text("–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã on/off, yes/no!\n\n"
                                            "–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {}\n"
                                            "–ö–æ–≥–¥–∞ True, –ª—é–±—ã–µ gbans, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç, –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ,"
                                            "–∫–æ–≥–¥–∞ False, –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è—è –≤–∞—Å –≤–æ –≤–ª–∞—Å—Ç–∏ "
                                            "—Å–ø–∞–º–µ—Ä–æ–≤.".format(sql.does_chat_gban(update.effective_chat.id)))


def __stats__():
    return "{} –ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏".format(sql.num_gbanned_users())


def __user_info__(user_id):
    is_gbanned = sql.is_user_gbanned(user_id)

    text = "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: <b>{}</b>"
    if is_gbanned:
        text = text.format("Yes")
        user = sql.get_gbanned_user(user_id)
        if user.reason:
            text += "\n–ü—Ä–∏—á–∏–Ω–∞: {}".format(html.escape(user.reason))
    else:
        text = text.format("No")
    return text


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è *gbans*: `{}`.".format(sql.does_chat_gban(chat_id))


__help__ = """
*–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º:*
 - /gbanstat <on/off/yes/no>: –û—Ç–∫–ª—é—á–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–µ—Ä–Ω–µ—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

Gbans, —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–µ—Ç–∞ —Å–ø–∞–º–µ—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å \
–≤–∞—Å –∏ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã, —É–¥–∞–ª–∏–≤ —Å–ø–∞–º-–ø–æ—Ç–æ–∫–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. –ò—Ö –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –≤—ã–ø–æ–ª–Ω–∏–≤ \
/gbanstat
"""

__mod_name__ = "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∞–Ω—ã"

GBAN_HANDLER = CommandHandler("gban", gban, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGBAN_HANDLER = CommandHandler("ungban", ungban, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GBAN_LIST = CommandHandler("gbanlist", gbanlist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)

GBAN_STATUS = CommandHandler("gbanstat", gbanstat, pass_args=True, filters=Filters.group)

dispatcher.add_handler(GBAN_HANDLER)
dispatcher.add_handler(UNGBAN_HANDLER)
dispatcher.add_handler(GBAN_LIST)
dispatcher.add_handler(GBAN_STATUS)


