import datetime
import importlib
import re
from typing import Optional, List

from telegram import Message, Chat, Update, Bot, User
from telegram import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import Unauthorized, BadRequest, TimedOut, NetworkError, ChatMigrated, TelegramError
from telegram.ext import CommandHandler, Filters, MessageHandler, CallbackQueryHandler
from telegram.ext.dispatcher import run_async, DispatcherHandlerStop, Dispatcher
from telegram.utils.helpers import escape_markdown

from tg_bot import dispatcher, updater, TOKEN, WEBHOOK, OWNER_ID, DONATION_LINK, CERT_PATH, PORT, URL, LOGGER, \
    ALLOW_EXCL
# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from tg_bot.modules import ALL_MODULES
from tg_bot.modules.helper_funcs.chat_status import is_user_admin
from tg_bot.modules.helper_funcs.misc import paginate_modules

PM_START_TEXT = """
–ü—Ä–∏–≤–µ—Ç {}, –º–æ–µ –∏–º—è {}! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è, –ø—Ä–æ—á—Ç–∏—Ç–µ –Ω–∏–∂–µ.

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–º–æ—â—å—é /help.

–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –∏/–∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –º–Ω–µ –≤—ã–∂–∏—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ, –Ω–∞–∂–º–∏—Ç–µ /donate, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–π VPS!
"""

HELP_STRINGS = """
*–û—Å–Ω–æ–≤–Ω—ã–µ* –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
 - /start: –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
 - /help: –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–º–æ—â–∏
 - /help <module name>: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ –Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –º–æ–¥—É–ª–µ.
 - /donate: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!

–ò —Å–ª–µ–¥—É—é—â–∏–µ:
"""

DONATE_STRING = """–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å!
–ú–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –º–Ω–æ–≥–æ —Ç—Ä—É–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –º–µ–Ω—è —Ç—É–¥–∞, –≥–¥–µ —è —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å, –∏ –∫–∞–∂–¥–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç \
–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –µ—â–µ –ª—É—á—à–µ. –í—Å–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–π–¥—É—Ç –Ω–∞ –ª—É—á—à–∏–π VPS, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —É—Å—Ç—Ä–æ–∏—Ç, –∏/–∏–ª–∏ –ø–∏–≤–æ \
(—Å–º. –µ–≥–æ –±–∏–æ–≥—Ä–∞—Ñ–∏—é!). C–ø–∞—Å–∏–±–æ –∫–∞–∂–¥–∞—è –º–µ–ª–æ—á—å –ø–æ–º–æ–≥–∞–µ—Ç!
–ü–æ–º–æ–≥–∏ –µ–º—É; [qiwi](qiwi.com/n/KEDVES)."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []

CHAT_SETTINGS = {}
USER_SETTINGS = {}

GDPR = []

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("tg_bot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if not imported_module.__mod_name__.lower() in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤–∞ –º–æ–¥—É–ª—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –æ–¥–∏–Ω")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__gdpr__"):
        GDPR.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(chat_id=chat_id,
                                text=text,
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=keyboard)

@run_async
def start(bot: Bot, update: Update, args: List[str]):
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            update.effective_message.reply_text(
                PM_START_TEXT.format(escape_markdown(first_name), escape_markdown(bot.first_name), OWNER_ID),
                parse_mode=ParseMode.MARKDOWN)
    else:
        update.effective_message.reply_text("–≠–π, —á—Ç–æ —Ö–æ—Ç–µ–ª?")


# for test purposes
def error_callback(bot, update, error):
    try:
        raise error
    except Unauthorized:
        print("Unauthorized")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞! –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∏–∂–µ")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        # handle slow connection problems
    except NetworkError:
        print("–ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        # handle other connection problems
    except TelegramError:
        print(error)
        # handle all other telegram related errors


@run_async
def help_button(bot: Bot, update: Update):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)
    try:
        if mod_match:
            module = mod_match.group(1)
            text = "–í–æ—Ç —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –º–æ–¥—É–ª—é *{}*:\n".format(HELPABLE[module].__mod_name__) \
            + HELPABLE[module].__help__
            bot.edit_message_text(chat_id=query.message.chat_id,
                              message_id=query.message.message_id,
                              text=text,
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(
                                         [[InlineKeyboardButton(text="üîô", callback_data="help_back")]]))

        elif prev_match:
            curr_page = int(prev_match.group(1))
            bot.edit_message_text(chat_id=query.message.chat_id,
                              message_id=query.message.message_id,
                              text=HELP_STRINGS,
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(
                                         paginate_modules(curr_page - 1, HELPABLE, "help")))

        elif next_match:
            next_page = int(next_match.group(1))
            bot.edit_message_text(chat_id=query.message.chat_id,
                              message_id=query.message.message_id,
                              text=HELP_STRINGS,
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(
                                         paginate_modules(next_page + 1, HELPABLE, "help")))

        elif back_match:
            bot.edit_message_text(chat_id=query.message.chat_id,
                              message_id=query.message.message_id,
                              text=HELP_STRINGS,
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help")))

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
    except BadRequest as excp:
        if excp.message == "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ":
            pass
        elif excp.message == "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞":
            pass
        elif excp.message == "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ":
            pass
        else:
            LOGGER.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–Ω–æ–ø–∫–∞—Ö –ø–æ–º–æ—â–∏. %s", str(query.data))


@run_async
def get_help(bot: Bot, update: Update):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:

        update.effective_message.reply_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫–æ –º–Ω–µ –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                                            reply_markup=InlineKeyboardMarkup(
                                                [[InlineKeyboardButton(text="–ü–æ–º–æ–≥—É —á–µ–º —Å–º–æ–≥—É",
                                                                       url="t.me/{}?start=help".format(
                                                                           bot.username))]]))
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è * {} *:\n".format(HELPABLE[module].__mod_name__) \
               + HELPABLE[module].__help__
        send_help(chat.id, text, InlineKeyboardMarkup([[InlineKeyboardButton(text="üîô", callback_data="help_back")]]))

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id)) for mod in USER_SETTINGS.values())
            dispatcher.bot.send_message(user_id, "–≠—Ç–æ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:" + "\n\n" + settings,
                                        parse_mode=ParseMode.MARKDOWN)

        else:
            dispatcher.bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:'(",
                                        parse_mode=ParseMode.MARKDOWN)

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(user_id,
                                        text="–î–ª—è –∫–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {}?".format(
                                            chat_name),
                                        reply_markup=InlineKeyboardMarkup(
                                            paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)))
        else:
            dispatcher.bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: '(\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ "
                                                 "–≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!",
                                        parse_mode=ParseMode.MARKDOWN)


@run_async
def settings_button(bot: Bot, update: Update):
    query = update.callback_query
    user = update.effective_user
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è * {} *:\n\n".format(escape_markdown(chat.title),
                                                                                     CHAT_SETTINGS[
                                                                                         module].__mod_name__) + \
                   CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(text=text,
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(
                                         [[InlineKeyboardButton(text="üîô",
                                                                callback_data="stngs_back({})".format(chat_id))]]))

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {} - –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ "
                                     "–≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.".format(chat.title),
                                     reply_markup=InlineKeyboardMarkup(
                                         paginate_modules(curr_page - 1, CHAT_SETTINGS, "stngs",
                                                          chat=chat_id)))

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text("–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {} - –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ "
                                     "–≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.".format(chat.title),
                                     reply_markup=InlineKeyboardMarkup(
                                         paginate_modules(next_page + 1, CHAT_SETTINGS, "stngs",
                                                          chat=chat_id)))

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(text="–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è {} - –≤—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ "
                                     "–≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç".format(escape_markdown(chat.title)),
                                     parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=InlineKeyboardMarkup(paginate_modules(0, CHAT_SETTINGS, "stngs",
                                                                                        chat=chat_id)))

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message == "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ":
            pass
        elif excp.message == "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞":
            pass
        elif excp.message == "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ":
            pass
        else:
            LOGGER.exception("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. %s", str(query.data))


@run_async
def get_settings(bot: Bot, update: Update):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]
    args = msg.text.split(None, 1)

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤–∞—à–∏."
            msg.reply_text(text,
                           reply_markup=InlineKeyboardMarkup(
                               [[InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                                      url="t.me/{}?start=stngs_{}".format(
                                                          bot.username, chat.id))]]))
        else:
            text = "–©–µ–ª–∫–Ω–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

    else:
        send_settings(chat.id, user.id, True)


@run_async
def donate(bot: Bot, update: Update):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]

    if chat.type == "private":
        update.effective_message.reply_text(DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)

        if OWNER_ID != 712178565 and DONATION_LINK:
            update.effective_message.reply_text("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Å–µ–π—á–∞—Å –º–µ–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç"
                                                "[here]({})".format(DONATION_LINK),
                                                parse_mode=ParseMode.MARKDOWN)

    else:
        try:
            bot.send_message(user.id, DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)

            update.effective_message.reply_text("–Ø –Ω–∞–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏ –≤–∞–º –≤ –ª—Å!")
        except Unauthorized:
            update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏.")

def main():
    start_handler = CommandHandler("start", start, pass_args=True)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    donate_handler = CommandHandler("donate", donate)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    # add antiflood processor
    Dispatcher.process_update = process_update

    if WEBHOOK:
        LOGGER.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ webhooks.")
        updater.start_webhook(listen="127.0.0.1",
                              port=PORT,
                              url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN,
                                    certificate=open(CERT_PATH, 'rb'))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)

    else:
        LOGGER.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ long polling.")
        updater.start_polling(timeout=15, read_latency=4)

    updater.idle()


def process_update(self, update):
    # An error happened while polling
    if isinstance(update, TelegramError):
        try:
            self.dispatch_error(None, update)
        except Exception:
            self.logger.exception('–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
        return

    for group in self.groups:
        try:
            for handler in (x for x in self.handlers[group] if x.check_update(update)):
                handler.handle_update(update, self)
                break

        # Stop processing with any other handler.
        except DispatcherHandlerStop:
            self.logger.debug('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑-–∑–∞ DispatcherHandlerStop')
            break

        # Dispatch any error.
        except TelegramError as te:
            self.logger.warning('–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ TelegramError.')

            try:
                self.dispatch_error(update, te)
            except DispatcherHandlerStop:
                self.logger.debug('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏')
                break
            except Exception:
                self.logger.exception('–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')

        # Errors should not stop the thread.
        except Exception:
            self.logger.exception('–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.')


if __name__ == '__main__':
    LOGGER.info("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: " + str(ALL_MODULES))
    main()
